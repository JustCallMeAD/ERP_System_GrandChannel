
@{
    ViewBag.Title = "FCRegularLocationAllocating";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Third-party Logistics Distribution System</h1>
<h2>Regular Order Put Away Page</h2>
<div class="maincontainer">
    <div>
        <input type="button" class="btn btn-default btn-back" value="<< Back" />
    </div>
    <div>
        <input style="width:140px" id="input-container" class="input-sm" placeholder="Container" />
        <input style="width:140px" id="input-batch" class="input-sm" placeholder="Batch" />
        <input style="width:140px" id="input-po" class="input-sm" placeholder="Cut PO" />
        <input style="width:140px" id="input-style" class="input-sm" placeholder="Style" />
        <input style="width:140px" id="input-color" class="input-sm" placeholder="Color" />
        <input style="width:140px" id="input-sku" class="input-sm" placeholder="SKU/PPK/Customer" />
        <input style="width:140px" id="input-size" class="input-sm" placeholder="Size or Size Combo" />
        <button id="btn-filter" class="btn btn-info">Filter</button>
        <button id="btn-clear" class="btn btn-danger">Clear Filter</button>
    </div>
    <div>
        <table id="table" class="table table-condensed table-hover table-striped">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Container</th>
                    <th>Ctn Range</th>
                    <th>Batch</th>
                    <th>PO</th>
                    <th>Style</th>
                    <th>Color</th>
                    <th>SKU</th>
                    <th>Size Bundle</th>
                    <th>Pcs Bundle</th>
                    <th>Status</th>
                    <th>TBA Ctns</th>
                    <th><input id="select-all" type="checkbox" value="12345" /></th>
                    <th>Cartons</th>
                    <th>Location</th>
                    <th>Pre-location</th>
                    <th>Operation</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
        <div style="text-align:right">
            <input type="button" class="btn btn-primary btn-filled" value="Allocate All Filled Items" />
        </div>
    </div>
    <div>
        <input id="input-batchlocation" type="text" class="input-lg" placeholder="Location" /> <button id="btn-batchupdate" class="btn btn-info">Batch Update</button>
    </div>
</div>
@section scripts
{
    <script>
        $(document).ready(function () {

            var table;
            var index;
            var status;
            var preLocation;

            var lastCartonValue = 0;
            var lastLocation = "";
            var cartons;
            var lastSearchBar;

            var lastCartonRange = "last";
            var currentCartonRange = "current";
            var lastPO = "last";
            var currentPO = "current";
            var lastStyle = "last";
            var currentStyle = "current";
            var lastColor = "last";
            var currentColor = "current";
            var lastBatch = "last";
            var currentBatch = "current";

            var filter = {
                container: "NULL",
                batch: "NULL",
                po: "NULL",
                style: "NULL",
                color: "NULL",
                sku: "NULL",
                size: "NULL"
            };

            //解析url中的参数函数
            function getUrlParameter(sParam) {
                var sPageURL = decodeURIComponent(window.location.search.substring(1)),
                    sURLVariables = sPageURL.split('&'),
                    sParameterName,
                    i;

                for (i = 0; i < sURLVariables.length; i++) {
                    sParameterName = sURLVariables[i].split('=');

                    if (sParameterName[0] === sParam) {
                        return sParameterName[1] === undefined ? true : sParameterName[1];
                    }
                }
            };

            //从地址栏获取参数
            var preid = getUrlParameter('preid');

            $.ajax({
                type: "GET",
                url: "/api/FCRegularLocationAllocating/?preId=" + preid + "&container=" + filter.container + "&batch=" + filter.batch + "&po=" + filter.po + "&style=" + filter.style + "&color=" + filter.color + "&sku=" + filter.sku + "&size=" + filter.size,
                contentType: 'application/json; charset=utf-8',
                dataType: "json",
                success: function (data) {
                    GetTable(data, table);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    layer.alert(XMLHttpRequest.responseJSON.exceptionMessage, function () {
                        window.location.reload();
                    });
                }
            });

            // 获取将要打散入库的箱数、库位集合
            $(".btn-filled").on("click", function () {

                var objArray = new Array();

                //为每一个填了库位的对象分配库位
                $(".input-location").each(function (i) {
                    if ($(this).val() != "")
                    {

                        var location = $(this).val();
                        var id = $(this).attr('iid');
                        var tbaCtns = $(this).parent().parent("tr").children('td').eq(11).children('font').html();
                        var cartons = $(this).parent().parent("tr").children('td').eq(13).children('input').val();
                        var container = $(this).parent().parent("tr").children('td').eq(1).children('text').html();

                        if (cartons == "") {
                            alert("Cartons and Location cannot be empty.");
                        }
                        else if (parseInt(cartons) > parseInt(tbaCtns)) {

                            alert("There is not enough cartons to be allocated!");
                        }
                        else if (cartons <= 0) {
                            alert("Cartons cannot be negative!");
                        }
                        else if (container == "null") {
                            alert("Container must be assigned first.");
                        }
                        else {
                            var obj = {
                                "preId": preid,
                                "id": id,
                                "cartons": cartons,
                                "location": location
                            };

                            objArray.push(obj);
                        }
                    }
                });

                //获取搜索条的内容
                lastSearchBar = $("#table_filter").children('label').children('input').val();

                //将objArray打包传入后端，根据包中内容分解已收货对象
                $.ajax({
                    type: "POST",
                    data: JSON.stringify(objArray),
                    url: "/api/FCRegularLocationAllocating/?container=" + filter.container + "&batch=" + filter.batch + "&po=" + filter.po + "&style=" + filter.style + "&color=" + filter.color + "&sku=" + filter.sku + "&size=" + filter.size,
                    contentType: 'application/json; charset=utf-8',
                    dataType: "json",
                    success: function (data) {

                        alert("Success!");

                        GetTable(data, table);

                        //将之前的搜索信息继续保存到搜索条过滤器中
                        var searchBar = $("#table_filter").children('label').children('input');
                        searchBar.val(lastSearchBar);

                        table.search(lastSearchBar).draw();
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        layer.alert(XMLHttpRequest.responseJSON.exceptionMessage, function () {
                            window.location.reload();
                        });
                    }
                });
            });

            //勾选全选选项，则选择所有对象
            $("#select-all").on("click", function () {
                if ($("#select-all").is(":checked")) {
                    $(".cb-selected").prop("checked", true);
                }
                else {
                    $(".cb-selected").prop("checked", false);
                }
            });

            //批量指定库位按钮
            $("#btn-batchupdate").on("click", function () {
                var button = $(this);
                var arr = new Array();

                //如果没有集装箱号未指定，则不能分配库存
                var isAssigned = true;

                //将所有被选中的CheckBox的对象的id放到数组中
                $("input:checkbox[name='selected']:checked").each(function (i) {
                    var val = $(this).val();
                    arr.push(val);
                    if($(this).parent().parent("tr").children('td').eq(1).children('text').html() == "null")
                    {
                        isAssigned = false;
                    }
                });

                if (button.prev().val() == "" || arr == null)
                {
                    alert("Location cannot be empty");
                }
                else if (isAssigned == false)
                {
                    alert("Container must be assigned first.")
                }
                else
                {
                    //将数组和location封装进一个对象以供POST传出
                    var obj = {
                        "arr": arr,
                        "preId": preid,
                        "location": button.prev().val()
                    };

                    //获取搜索条的内容
                    lastSearchBar = $("#table_filter").children('label').children('input').val();

                    //将所有被选中的对象默认视为分配所有已有箱数(通常只有一两箱)，即入库箱数等于待分配箱数
                    $.ajax({
                        type: "POST",
                        data: JSON.stringify(obj),
                        url: "/api/FCRegularLocationAllocatingBatch/?container=" + filter.container + "&batch=" + filter.batch + "&po=" + filter.po + "&style=" + filter.style + "&color=" + filter.color + "&sku=" + filter.sku + "&size=" + filter.size,
                        contentType: 'application/json; charset=utf-8',
                        dataType: "json",
                        beforeSend: function () {
                            index = layer.msg('Allocating...', {
                                icon: 1,
                                shade: 0.01,
                                time: 99 * 1000
                            });
                        },
                        success: function (data) {
                            layer.close(index);

                            alert("Success!");
                                
                            GetTable(data, table);

                            //将之前的搜索信息继续保存到搜索条过滤器中
                            var searchBar = $("#table_filter").children('label').children('input');
                            searchBar.val(lastSearchBar);

                            table.search(lastSearchBar).draw();
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            layer.alert(XMLHttpRequest.responseJSON.exceptionMessage, function () {
                                window.location.reload();
                            });
                        }
                    });
                }
            });

            //点击过滤按钮，按条件过滤
            $("#btn-filter").on("click", function () {

                filter.container = $("#input-container").val() == '' ? "NULL" : $("#input-container").val().toString();
                filter.batch = $("#input-batch").val() == '' ? "NULL" : $("#input-batch").val().toString();
                filter.po = $("#input-po").val() == '' ? "NULL" : $("#input-po").val().toString();
                filter.style = $("#input-style").val() == '' ? "NULL" : $("#input-style").val().toString();
                filter.color = $("#input-color").val() == '' ? "NULL" : $("#input-color").val().toString();
                filter.sku = $("#input-sku").val() == '' ? "NULL" : $("#input-sku").val().toString();
                filter.size = $("#input-size").val() == '' ? "NULL" : $("#input-size").val().toString();

                $.ajax({
                    type: "GET",
                    url: "/api/FCRegularLocationAllocating/?preId=" + preid + "&container=" + filter.container + "&batch=" + filter.batch + "&po=" + filter.po + "&style=" + filter.style + "&color=" + filter.color + "&sku=" + filter.sku + "&size=" + filter.size,
                    contentType: 'application/json; charset=utf-8',
                    dataType: "json",
                    beforeSend: function () {
                        index = layer.msg('Filtering...', {
                            icon: 1,
                            shade: 0.01,
                            time: 99 * 1000
                        });
                    },
                    success: function (data) {
                        layer.close(index);

                        alert("Filter applied.");
                        GetTable(data, table);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        layer.alert(XMLHttpRequest.responseJSON.exceptionMessage, function () {
                            window.location.reload();
                        });
                    }
                });
            });

            //点击清楚过滤器按钮，清除所有条件，并返回所有结果
            $("#btn-clear").on("click", function () {
                filter.container = "NULL";
                filter.batch = "NULL";
                filter.po = "NULL";
                filter.style = "NULL";
                filter.color = "NULL";
                filter.sku = "NULL";
                filter.size = "NULL";

                $.ajax({
                    type: "GET",
                    url: "/api/FCRegularLocationAllocating/?preId=" + preid + "&container=" + filter.container + "&batch=" + filter.batch + "&po=" + filter.po + "&style=" + filter.style + "&color=" + filter.color + "&sku=" + filter.sku + "&size=" + filter.size,
                    contentType: 'application/json; charset=utf-8',
                    dataType: "json",
                    success: function (data) {

                        alert("Filter has been reset.");
                        GetTable(data, table);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        layer.alert(XMLHttpRequest.responseJSON.exceptionMessage, function () {
                            window.location.reload();
                        });
                    }
                });
            });

            function GetTable(data, table) {
                if (table) {
                    table.destroy();
                }

                table = $("#table").DataTable({
                    data: data,
                    destroy: true,
                    //scrollX: true,
                    order: [[2, "asc"]],
                    scrollCollapse: true,
                    scrollY: "600px",
                    iDisplayLength: 100,
                    columns: [
                        {
                            data: "id",
                            render: function (data) {
                                return "<text>" + data + "</text>";
                            }
                        },
                        {
                            data: "container",
                            render: function (data) {
                                return "<text>" + data + "</text>";
                            }
                        },
                        {
                            data: "cartonRange",
                            render: function (data) {
                                if (data != lastCartonRange) {
                                    lastCartonRange = data;
                                }
                                else {
                                    currentCartonRange = data;
                                }
                                return "<text>" + data + "</text>";
                            }
                        },
                        {
                            data: "batch",
                            render: function (data) {
                                if (data != lastBatch) {
                                    lastBatch = data;
                                }
                                else {
                                    currentBatch = data;
                                }
                                return "<text>" + data + "</text>";
                            }
                        },
                        {
                            data: "purchaseOrder",
                            render: function (data) {

                                if (data != lastPO)
                                    lastPO = data;
                                else
                                    currentPO = data;

                                return "<text>" + data + "</text>";
                            }
                        },
                        {
                            data: "style",
                            render: function (data) {

                                if (data != lastStyle)
                                    lastStyle = data;
                                else
                                    currentStyle = data;

                                return "<text>" + data + "</text>";
                            }
                        },
                        {
                            data: "color",
                            render: function (data) {

                                if (data != lastColor)
                                    lastColor = data;
                                else
                                    currentColor = data;

                                return "<text>" + data + "</text>";
                            }
                        },
                        {
                            data: "customer",
                            render: function (data) {
                                return "<font>" + data + "</font>";
                            }
                        },
                        {
                            data: "sizeBundle",
                            render: function (data) {
                                return "<font>" + data + "</font>";
                            }
                        },
                        {
                            data: "pcsBundle",
                            render: function (data) {
                                return "<font>" + data + "</font>";
                            }
                        },
                        {
                            data: "status",
                            render: function (data) {

                                status = data;
                                if (data == "To Be Allocated") {
                                    return "<font style='color:Red'>" + data + "</font>";
                                }
                                else {
                                    return "<font style='color:Orange'>" + data + "</font>";
                                }
                            }
                        },
                        {
                            data: "toBeAllocatedCtns",
                            render: function (data) {
                                cartons = data;
                                lastCartonValue = data;
                                if (cartons != 0) {
                                    return "<font color='blue'>" + data + "</font>";
                                }
                                else {
                                    return "";
                                }
                            }
                        },
                        {
                            data: "id",
                            render: function (data) {
                                //if (currentCartonRange == lastCartonRange && currentBatch == lastBatch) {
                                if (cartons == 0)
                                {
                                    return "";
                                }
                                else {
                                    return "<input name='selected' type='checkbox' class='cb-selected' value='"
                                        + data + "' />";
                                }
                            }
                        },
                        {
                            data: "id",
                            render: function (data) {
                                if (cartons != 0) {
                                    return "<input style='width:70px' id='ctns-" + data + "' type='number' value='" + lastCartonValue + "' />";
                                }
                                else {
                                    return "";
                                }
                            }
                        },
                        {
                            data: "id",
                            render: function (data) {
                                if (cartons != 0) {
                                    //return "<input style='width:50px' id='loc-" + data + "' value='" + lastLocation + "' /><button style='width:50px' class='btn btn-link btn-allocate' id='" + data + "'>OK</button>";
                                    return "<input style='width:70px' class='input-location' iid='" + data + "' id='loc-" + data + "' />";
                                }
                                else {
                                    return "";
                                }
                            }
                        },
                        {
                            data: "preLocation",
                            render: function (data) {
                                preLocation = data;
                                if (data == null)
                                    return "";
                                else
                                    return "<text>" + data + "</text>";
                            }
                        },
                        {
                            data: "id",
                            render: function (data) {
                                if (cartons != 0 && (preLocation != null || preLocation != " ") && status != "Allocating") {
                                    return "<input type='button' style='width:70px' class='btn btn-link' iid='" + data + "' value='Appply' />";
                                }
                                else {
                                    return "";
                                }
                            }
                        },
                    ]
                });
            };

            $(".btn-back").on("click", function () {
                window.history.back(-1);
            });
        });
    </script>
}
